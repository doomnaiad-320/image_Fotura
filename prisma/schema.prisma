generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

enum AssetType {
  image
  video
}

enum TransactionStatus {
  pending
  success
  failed
  refunded
}

enum AuditAction {
  signin
  signout
  create_provider
  update_provider
  delete_provider
  create_model
  update_model
  sync_models
  grant_credits
  ai_request
}

model User {
  id              String              @id @default(cuid())
  email           String              @unique
  name            String?
  passwordHash    String
  role            UserRole            @default(user)
  credits         Int                 @default(0)
  favorites       Favorite[]
  transactions    CreditTransaction[]
  auditLogs       AuditLog[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  sessions        Session[]
  accounts        Account[]
  aiUsages        AiUsage[]
}

model Asset {
  id           String      @id @default(cuid())
  title        String
  type         AssetType
  coverUrl     String
  videoUrl     String?
  aspectRatio  Float       @default(1.0)
  durationSec  Int?
  modelTag     String
  tags         Json        @default("[]")
  views        Int         @default(0)
  likes        Int         @default(0)
  hotScore     Float       @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  favorites    Favorite[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  assetId   String
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([userId, assetId])
}

model Provider {
  id               String    @id @default(cuid())
  slug             String    @unique
  name             String
  baseURL          String
  apiKeyEncrypted  String
  extraHeaders     Json      @default("{}")
  enabled          Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  models           AiModel[]
  transactions     CreditTransaction[]
}

model AiModel {
  id             String    @id @default(cuid())
  slug           String    @unique
  displayName    String
  providerId     String
  family         String
  modalities     Json      @default("[]")
  contextWindow  Int?
  supportsStream Boolean   @default(false)
  pricing        Json      @default("{}")
  rateLimit      Json      @default("{}")
  tags           Json      @default("[]")
  enabled        Boolean   @default(true)
  sort           Int       @default(100)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  transactions CreditTransaction[]
  usages       AiUsage[]
}

model CreditTransaction {
  id            String            @id @default(cuid())
  userId        String
  providerId    String?
  providerSlug  String?
  modelId       String?
  modelSlug     String?
  requestId     String?
  delta         Int
  reason        String
  status        TransactionStatus @default(pending)
  metadata      Json              @default("{}")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  Provider? @relation(fields: [providerId], references: [id])
  model     AiModel?  @relation(fields: [modelId], references: [id])

  @@index([userId])
  @@index([requestId])
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  action      AuditAction
  description String
  ip          String?
  userAgent   String?
  metadata    Json        @default("{}")
  createdAt   DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model AiUsage {
  id           String      @id @default(cuid())
  userId       String?
  modelId      String?
  requestId    String?
  providerSlug String?
  modelSlug    String?
  kind         String
  durationMs   Int?
  inputTokens  Int?
  outputTokens Int?
  cost         Int?
  status       TransactionStatus @default(pending)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user  User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  model AiModel? @relation(fields: [modelId], references: [id], onDelete: SetNull)

  @@index([requestId])
  @@index([modelSlug])
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
