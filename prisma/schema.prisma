generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}




model User {
  id              String              @id @default(cuid())
  email           String              @unique
  name            String?
  passwordHash    String
  role            String              @default("user")
  credits         Int                 @default(0)
  favorites       Favorite[]
  transactions    CreditTransaction[]
  auditLogs       AuditLog[]
  assets          Asset[]
  reuseRecords    ReuseRecord[]       // 复用记录
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  sessions        Session[]
  accounts        Account[]
  aiUsages        AiUsage[]
}

model Asset {
  id              String      @id @default(cuid())
  title           String
  type            String
  coverUrl        String
  videoUrl        String?
  aspectRatio     Float       @default(1.0)
  durationSec     Int?
  modelTag        String
  tags            String      @default("[]")
  views           Int         @default(0)
  likes           Int         @default(0)
  hotScore        Float       @default(0)
  // AI 生成相关信息
  prompt          String?
  userId          String?
  messageId       String?
  conversationId  String?
  model           String?
  modelName       String?
  size            String?
  mode            String?
  editChain       String?     @default("{}")
  isPublic        Boolean     @default(true)
  // 软删除字段
  isDeleted       Boolean     @default(false)
  deletedAt       DateTime?
  reusePoints     Int         @default(50)    // 复用所需积分，0表示免费
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  favorites       Favorite[]
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  // 复用关系
  sourceWorks     WorkRelation[] @relation("SourceWork")
  derivativeWorks WorkRelation[] @relation("DerivativeWork")
  reuseRecords    ReuseRecord[]

  @@index([userId])
  @@index([isPublic])
  @@index([isDeleted])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  assetId   String
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([userId, assetId])
}

model Provider {
  id               String    @id @default(cuid())
  slug             String    @unique
  name             String
  baseURL          String
  apiKeyEncrypted  String
  extraHeaders     String      @default("{}")
  enabled          Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  models           AiModel[]
  transactions     CreditTransaction[]
}

model AiModel {
  id                 String    @id @default(cuid())
  slug               String    @unique
  displayName        String
  providerId         String
  family             String
  modalities         String      @default("[]")
  contextWindow      Int?
  supportsStream     Boolean   @default(false)
  pricing            String      @default("{}")
  rateLimit          String      @default("{}")
  tags               String      @default("[]")
  enabled            Boolean   @default(true)
  isPromptOptimizer  Boolean   @default(false)
  sort               Int       @default(100)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  transactions CreditTransaction[]
  usages       AiUsage[]
}

model CreditTransaction {
  id            String            @id @default(cuid())
  userId        String
  providerId    String?
  providerSlug  String?
  modelId       String?
  modelSlug     String?
  requestId     String?
  delta         Int
  reason        String
  status        String @default("pending")
  metadata      String              @default("{}")
  // 复用相关字段
  refWorkId     String?             // 关联的作品 ID
  refUserId     String?             // 关联的用户 ID（B用户）
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  Provider? @relation(fields: [providerId], references: [id])
  model     AiModel?  @relation(fields: [modelId], references: [id])

  @@index([userId])
  @@index([requestId])
  @@index([refWorkId])
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  action      String
  description String
  ip          String?
  userAgent   String?
  metadata    String        @default("{}")
  createdAt   DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model AiUsage {
  id           String      @id @default(cuid())
  userId       String?
  modelId      String?
  requestId    String?
  providerSlug String?
  modelSlug    String?
  kind         String
  durationMs   Int?
  inputTokens  Int?
  outputTokens Int?
  cost         Int?
  status       String @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user  User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  model AiModel? @relation(fields: [modelId], references: [id], onDelete: SetNull)

  @@index([requestId])
  @@index([modelSlug])
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 全局设置表
model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 作品来源关系表（内部使用，前端不展示）
model WorkRelation {
  id              String   @id @default(cuid())
  sourceWorkId    String
  derivativeWorkId String
  createdAt       DateTime @default(now())

  sourceWork      Asset @relation("SourceWork", fields: [sourceWorkId], references: [id], onDelete: Cascade)
  derivativeWork  Asset @relation("DerivativeWork", fields: [derivativeWorkId], references: [id], onDelete: Cascade)

  @@index([sourceWorkId])
  @@index([derivativeWorkId])
}

// 复用记录表（防止重复奖励）
model ReuseRecord {
  id              String   @id @default(cuid())
  sourceWorkId    String
  reuserId        String
  rewardGranted   Boolean  @default(false)
  createdAt       DateTime @default(now())

  sourceWork Asset @relation(fields: [sourceWorkId], references: [id], onDelete: Cascade)
  reuser     User  @relation(fields: [reuserId], references: [id], onDelete: Cascade)

  @@unique([sourceWorkId, reuserId])
  @@index([sourceWorkId])
  @@index([reuserId])
}
